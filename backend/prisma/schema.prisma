// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Service {
  id              String    @id @default(uuid())
  name            String
  description     String
  durationMinutes Int       @map("duration_minutes")
  price           Float
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  bookings        Booking[]

  @@map("services")
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String
  address   String?
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  bookings  Booking[]

  @@map("customers")
}

model Booking {
  id               String   @id @default(uuid())
  serviceId        String   @map("service_id")
  customerId       String   @map("customer_id")
  bookingDate      DateTime @map("booking_date")
  startTime        DateTime @map("start_time")
  endTime          DateTime @map("end_time")
  status           String   @default("pending") // pending, confirmed, completed, cancelled
  confirmationCode String   @unique @map("confirmation_code")
  specialNotes     String?  @map("special_notes")
  address          String
  city             String?
  state            String?
  zipCode          String?  @map("zip_code")
  apartmentUnit    String?  @map("apartment_unit")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([bookingDate])
  @@index([status])
  @@index([serviceId])
  @@index([customerId])
  @@map("bookings")
}

model TimeSlot {
  id          String  @id @default(uuid())
  dayOfWeek   Int     @map("day_of_week") // 0 = Sunday, 6 = Saturday
  startTime   String  @map("start_time") // HH:mm format
  endTime     String  @map("end_time") // HH:mm format
  isAvailable Boolean @default(true) @map("is_available")

  @@map("time_slots")
}

model BlockedDate {
  id     String   @id @default(uuid())
  date   DateTime
  reason String?

  @@index([date])
  @@map("blocked_dates")
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String // hashed
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}
